name: Continuous Integration

on: [push]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'

    - name: Cache Node modules
      uses: actions/cache@v3
      with:
        path: backend/node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('backend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install Dependencies
      working-directory: backend
      run: npm install

    - name: Run tests and generate coverage
      working-directory: ./backend
      run: npm run test # Ensure this command configures Vitest to output coverage-summary.json in the backend/coverage folder

    # - name: Download previous coverage report
    #   uses: actions/download-artifact@v4
    #   with:
    #     name: coverage-report
    #     path: ./previous-coverage
    #   continue-on-error: true # if not exist

    - name: Download artifact
      id: download-artifact
      uses: dawidd6/action-download-artifact@v3
      with:
        name: coverage-report
        path: ./previous-coverage

    - name: Compare coverage reports
      run: |
        if [ -f "./previous-coverage/coverage-summary.json" ]; then
          current=$(jq '.total.lines.pct' ./backend/coverage/coverage-summary.json)
          previous=$(jq '.total.lines.pct' ./previous-coverage/coverage-summary.json)
          echo "Current Coverage: $current%"
          echo "Previous Coverage: $previous%"
          if [ $(echo "$current < $previous" | bc) -eq 1 ]; then
            echo "Coverage has decreased!"
            exit 1
          fi
        else
          echo "Previous coverage report not found. Assuming first build and passing."
        fi
    
    - name: Store current coverage report as previous for future comparison
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: ./backend/coverage/coverage-summary.json

    - name: Check if JS/TS files are formatted
      id: check_format
      run: |
        FILES=$(git diff --name-only HEAD~1 | grep -E "\.(js|ts)$")
        if [ "$FILES" ]; then
          echo "Checking formatting for: $FILES"
          npx prettier --check $FILES || echo "::set-output name=formatted::true"
        fi

    - name: Format JS/TS files
      if: steps.check_format.outputs.formatted == 'true'
      run: |
        FILES=$(git diff --name-only HEAD~1 | grep -E "\.(js|ts)$")
        echo "Formatting files: $FILES"
        npx prettier --write $FILES
        git config --global user.name 'github-actions'
        git config --global user.email 'github-actions@github.com'
        git add $FILES
        git commit -m 'Format JavaScript and TypeScript code'
        git push